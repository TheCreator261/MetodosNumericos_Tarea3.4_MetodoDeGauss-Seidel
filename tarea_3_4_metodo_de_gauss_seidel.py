# -*- coding: utf-8 -*-
"""Tarea 3.4 Metodo de Gauss-Seidel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QR97EC_5rBSawaP055CdrTobXuOLMMCv
"""

#Antonio Josue Rodriguez Falcon

import numpy as np
import matplotlib.pyplot as plt

#Ejercicio 1: Circuito eléctrico
A1 = np.array([[10, 2, 3, 1],
               [2, 12, 2, 3],
               [3, 2, 15, 1],
               [1, 3, 1, 10]])
b1 = np.array([15, 22, 18, 10])

#Ejercicio 2: Transferencia de calor
A2 = np.array([[20, -5, -3],
               [-4, 18, -2],
               [-3, -1, 22]])
b2 = np.array([100, 120, 130])

#Ejercicio 3: Modelo de economía lineal
A3 = np.array([[15, -4, -1, -2, 0, 0, 0, 0, 0, 0],
               [-3, 18, -2, 0, -1, 0, 0, 0, 0, 0],
               [-1, -2, 20, 0, 0, -5, 0, 0, 0, 0],
               [-2, -1, -4, 22, 0, 0, -1, 0, 0, 0],
               [0, -1, -3, -1, 25, -2, 0, 0, 0, 0],
               [0, 0, -2, 0, -1, 28, 0, -1, 0, 0],
               [0, 0, 0, -4, 0, -2, 30, 0, 0, 0,],
               [0, 0, 0, 0, -1, 0, -1, 35, -2, 0],
               [0, 0, 0, 0, 0, -2, 0, -3, 40, -1],
               [0, 0, 0, 0, 0, 0, -3, 0, -1, 45]])
b3 = np.array([200, 250, 180, 300, 270, 310, 320, 400, 450, 500])

def gauss_seidel(A, b, x0, tol, max_iter):
    """
    Implementa el método de Gauss-Seidel para resolver un sistema de ecuaciones lineales.

    Args:
        A: Matriz de coeficientes del sistema.
        b: Vector de términos independientes.
        x0: Vector inicial de la solución.
        tol: Tolerancia para la convergencia.
        max_iter: Número máximo de iteraciones.

    Returns:
        x: Solución aproximada del sistema.
        errors_abs: Errores absolutos en cada iteración.
        errors_rel: Errores relativos en cada iteración.
        errors_cuad: Errores cuadráticos en cada iteración.
    """
    n = len(b)
    x = x0.copy()
    x_prev = x0.copy()
    errors_abs = []
    errors_rel = []
    errors_cuad = []
    solutions = [x0.copy()]  # Almacenar la solución inicial

    for k in range(max_iter):
        for i in range(n):
            sum_j = 0
            for j in range(n):
                if j != i:
                    sum_j += A[i, j] * x[j]
            x[i] = (b[i] - sum_j) / A[i, i]

        error_abs = np.linalg.norm(x - x_prev, np.inf)
        error_rel = error_abs / np.linalg.norm(x, np.inf)
        error_cuad = np.linalg.norm(x - x_prev) ** 2

        errors_abs.append(error_abs)
        errors_rel.append(error_rel)
        errors_cuad.append(error_cuad)
        solutions.append(x.copy())  # Almacenar la solución actual

        if error_abs < tol:
            break
        x_prev = x.copy()

    return x, errors_abs, errors_rel, errors_cuad, solutions

# Parámetros para el método de Gauss-Seidel
tol = 1e-6
max_iter = 100

# Solución para el Ejercicio 1
x0_1 = np.zeros(len(b1))
x1, errors_abs_1, errors_rel_1, errors_cuad_1, solutions_1 = gauss_seidel(A1, b1, x0_1, tol, max_iter)

# Solución para el Ejercicio 2
x0_2 = np.zeros(len(b2))
x2, errors_abs_2, errors_rel_2, errors_cuad_2, solutions_2 = gauss_seidel(A2, b2, x0_2, tol, max_iter)

# Solución para el Ejercicio 3
x0_3 = np.zeros(len(b3))
x3, errors_abs_3, errors_rel_3, errors_cuad_3, solutions_3 = gauss_seidel(A3, b3, x0_3, tol, max_iter)

# Gráficas de los errores para el Ejercicio 1
plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plt.plot(errors_abs_1)
plt.title('Error Absoluto - Ejercicio 1')
plt.xlabel('Iteración')
plt.ylabel('Error')

plt.subplot(1, 3, 2)
plt.plot(errors_rel_1)
plt.title('Error Relativo - Ejercicio 1')
plt.xlabel('Iteración')
plt.ylabel('Error')

plt.subplot(1, 3, 3)
plt.plot(errors_cuad_1)
plt.title('Error Cuadrático - Ejercicio 1')
plt.xlabel('Iteración')
plt.ylabel('Error')

plt.tight_layout()
plt.show()

# Gráficas de los errores para el Ejercicio 2
plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plt.plot(errors_abs_2)
plt.title('Error Absoluto - Ejercicio 2')
plt.xlabel('Iteración')
plt.ylabel('Error')

plt.subplot(1, 3, 2)
plt.plot(errors_rel_2)
plt.title('Error Relativo - Ejercicio 2')
plt.xlabel('Iteración')
plt.ylabel('Error')

plt.subplot(1, 3, 3)
plt.plot(errors_cuad_2)
plt.title('Error Cuadrático - Ejercicio 2')
plt.xlabel('Iteración')
plt.ylabel('Error')

plt.tight_layout()
plt.show()

# Gráficas de los errores para el Ejercicio 3
plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plt.plot(errors_abs_3)
plt.title('Error Absoluto - Ejercicio 3')
plt.xlabel('Iteración')
plt.ylabel('Error')

plt.subplot(1, 3, 2)
plt.plot(errors_rel_3)
plt.title('Error Relativo - Ejercicio 3')
plt.xlabel('Iteración')
plt.ylabel('Error')

plt.subplot(1, 3, 3)
plt.plot(errors_cuad_3)
plt.title('Error Cuadrático - Ejercicio 3')
plt.xlabel('Iteración')
plt.ylabel('Error')

plt.tight_layout()
plt.show()

# Imprimir las soluciones
print("Solución Ejercicio 1:")
print(x1)
print("\nSolución Ejercicio 2:")
print(x2)
print("\nSolución Ejercicio 3:")
print(x3)

# Imprimir tablas de soluciones iterativas
def print_table(solutions, ejercicio):
    print(f"\nTabla de Soluciones Iterativas - Ejercicio {ejercicio}:")
    if ejercicio == 1:
        headers = ["Iteración", "I1", "I2", "I3", "I4"]
    elif ejercicio == 2:
        headers = ["Iteración", "T1", "T2", "T3"]
    elif ejercicio == 3:
        headers = ["Iteración", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10"]
    else:
        return

    print("-" * (len(headers) * 15 + 1))  # Ajustar el ancho de la tabla
    print("| " + " | ".join(headers) + " |")
    print("-" * (len(headers) * 15 + 1))

    for i, sol in enumerate(solutions):
        # Formatear cada valor con 6 decimales y centrarlo en un campo de 13 caracteres
        row = [f"{i:^13}"] + [f"{val:^13.6f}" for val in sol]
        print("| " + " | ".join(row) + " |")
        print("-" * (len(headers) * 15 + 1))

print_table(solutions_1, 1)
print_table(solutions_2, 2)
print_table(solutions_3, 3)